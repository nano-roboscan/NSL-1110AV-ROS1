#!/usr/bin/env python

PACKAGE = "roboscan_nsl1110"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


lens_type_enum = gen.enum([ gen.const("LENS_50", int_t, 0, "LENS50"),
                             gen.const("LENS_90",    int_t, 1, "LENS90"),
                             gen.const("LENS_110", int_t, 2, "LENS110")],
                             "An enum to set lens type")


image_type_enum = gen.enum([ gen.const("Grayscale", int_t, 1, "Grayscale"),
                             gen.const("Distance",    int_t, 2, "Distance"),
                             gen.const("DistanceAmplitude", int_t, 3, "Distance&Amplitude")
                             ],
                             "An enum to set image type")


hdr_mode_enum  =  gen.enum([ gen.const("HDR_off",      int_t, 0, "HDR off"),
                             gen.const("HDR_spatial",  int_t, 1, "HDR spatial"),
                             gen.const("HDR_temporal", int_t, 2, "HDR temporal")],
                             "An enum to set HDR mode")


dual_beam_enum =  gen.enum([ gen.const("DualBeam_off",   int_t, 0, "DualBeam off"),
                             gen.const("DualBeam_6Mhz",  int_t, 1, "DualBeam 6Mhz"),
                             gen.const("DualBeam_3Mhz",  int_t, 2, "DualBeam 3Mhz")],
                             "An enum to set DualBeam mode")

frequence_modulation_enum = gen.enum([ gen.const("24MHz", int_t, 0, "24MHz"),
                                       gen.const("12MHz", int_t, 1, "12MHz"),
                                       gen.const("6MHz", int_t, 2, "6MHz"),
                                       gen.const("3MHz", int_t, 3, "3MHz")],
                                       #gen.const("1_5MHz", int_t, 4, "1_5MHz"),
                                       #gen.const("0_75MHz", int_t, 5, "0_75MHz")],
                                       "An enum to set modulation frequency")


channel_enum = gen.enum([ gen.const("0", int_t, 0, "0"),
                          gen.const("1", int_t, 1, "1"),
                          gen.const("2", int_t, 2, "2"),
                          gen.const("3", int_t, 3, "3"),
                          gen.const("4", int_t, 4, "4"),
                          gen.const("5", int_t, 5, "5"),
                          gen.const("6", int_t, 6, "6"),
                          gen.const("7", int_t, 7, "7"),
                          gen.const("8", int_t, 8, "8"),
                          gen.const("9", int_t, 9, "9"),
                          gen.const("10", int_t, 10, "10"),
                          gen.const("11", int_t, 11, "11"),
                          gen.const("12", int_t, 12, "12"),
                          gen.const("13", int_t, 13, "13"),
                          gen.const("14", int_t, 14, "14"),
                          gen.const("15", int_t, 15, "15")],
                          "An enum to set channel index")


######  Name                              Type      ReCfg level   Description                   Default   Min   Max
### Acquisition Control
gen.add("cvShow",                      bool_t,   0,            "cvShow",                     True)
gen.add("lensType",                    int_t,    0,            "lens type",                  2,        0,    2, edit_method=lens_type_enum)
gen.add("imageType",                   int_t,    0,            "image type",                 2,        1,    3, edit_method=image_type_enum)
gen.add("hdrMode",                     int_t,    0,            "hdr mode",                   0,        0,    2, edit_method=hdr_mode_enum)
gen.add("int0",                        int_t,    0,            "int0",                       1200,     0,    2000)
gen.add("int1",                        int_t,    0,            "int1",                       500,      0,    2000)
gen.add("int2",                        int_t,    0,            "int2",                       150,      0,    2000)
gen.add("intGr",                       int_t,    0,            "intGray",                    3000,     0,    40000)
gen.add("minAmplitude",                int_t,    0,            "min Amplitude",              100,      0,    1000)
gen.add("modIndex",                    int_t,    0,            "mod Index",                  1,        0,    4, edit_method=frequence_modulation_enum)
gen.add("channel",                     int_t,    0,            "channel",                    0,        0,    15, edit_method=channel_enum)
gen.add("roi_leftX",                   int_t,    0,            "roi leftX",                  4,        4,    124)
gen.add("roi_topY",                    int_t,    0,            "roi topY",                   6,        6,    116)
gen.add("roi_rightX",                  int_t,    0,            "roi rightX",                 323,      131,  323)
gen.add("roi_bottomY",                 int_t,    0,            "roi bottomY",                125,      125,  125)
gen.add("transformAngle",              double_t, 0,            "transformAngle",             0,        -360, 360)
gen.add("cutPixels",                   int_t,    0,            "cut Pixels",                 0,        0,    300)
gen.add("medianFilter",                bool_t,   0,            "median Filter",              False)
gen.add("averageFilter",               bool_t,   0,            "average Filter",             False)
gen.add("edgeFilterThreshold",         int_t,    0,            "edgeFilter Threshold",       0,        0,    10000)
gen.add("temporalFilterFactor",        double_t, 0,            "temporalFilter Factor",      0.3,      0,    1.0)
gen.add("temporalFilterThreshold",     int_t,    0,            "temporalFilter Threshold",   0,        0,    10000)
gen.add("temporalEdgeThresholdLow",    int_t,    0,            "temporalEdge ThresholdLow",  0,        0,    10000)
gen.add("temporalEdgeThresholdHigh",   int_t,    0,            "temporalEdge ThresholdHigh", 0,        0,    10000)
gen.add("useLastValue",                bool_t,   0,            "useLastValue",               False)
gen.add("ipAddr",                      str_t,    0,            "ipAddr",                     "192.168.7.2")


exit(gen.generate(PACKAGE, "roboscan_publish_node", "roboscan_nsl1110"))

